import json
import logging

# Set up logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    # Log the incoming event
    logger.info("Received event: %s", json.dumps(event))
    
    try:
        # Parse the body of the request to extract data
        body = json.loads(event.get('body', '{}'))
        
        # Extract answers from the body
        answers = body.get('answers', [])
        
        # Log the received data
        logger.info("Data received: %s", json.dumps(answers))
        
        # Evaluate the answers
        total_marks, score, percentage, details = evaluate_answers(answers)
        
        # Log the results
        logger.info("Total Marks: %s", total_marks)
        logger.info("Score: %s", score)
        logger.info("Percentage: %s%%", percentage)
        logger.info("Details: %s", json.dumps(details))
        
        # Respond with the results
        return {
            'statusCode': 200,
            'body': json.dumps({
                'message': 'Data processed and score calculated successfully!',
                'totalMarks': total_marks,
                'score': score,
                'percentage': percentage,
                'details': details
            })
        }
    
    except Exception as e:
        # Log the exception if something goes wrong
        logger.error("Error processing the request: %s", str(e))
        
        return {
            'statusCode': 500,
            'body': json.dumps('Internal Server Error')
        }

def evaluate_answers(student_answers):
    # Correct answers for each question
    correct_answers = [
        [1, 1, 1, 1],
        [1, 0, 0, 0],
        [0, 1, 1, 0],
        [1, 0, 0, 0],
        [0, 0, 0, 1],
        [0, 1, 1, 0],
        [1, 1, 1, 0],
        [0, 1, 1, 1],
        [0, 0, 1, 0],
        [0, 0, 0, 1]
    ]
    
    def NoofAnswers(a):
        return a.count(1)
    
    def calculate_score(answers):
        Total = 200
        Score = 0
        details =''  # List to store question numbers and their status
        for i in range(len(correct_answers)):
            if i >= len(answers):
                continue
            
            answer = correct_answers[i]
            student_answer = answers[i]
            
            Bitscore = 0
            b = NoofAnswers(answer)
            count0 = 0
            Partially = 0
            
            for j in range(len(answer)):
                if answer[j] == student_answer[j]:
                    if student_answer[j] == 1 and Partially == 0:
                        if b == 1:
                            Bitscore += 20
                        elif b == 2:
                            Bitscore += 10
                        elif b == 3:
                            Bitscore += 6.66
                            if Bitscore == 19.98:
                                Bitscore = 20
                        elif b == 4:
                            Bitscore += 5
                    else:
                        count0 += 1
                else:
                    if student_answer[j] == 0:
                        count0 += 1
                    elif student_answer[j] == 1:
                        Bitscore = 0
                        Partially = 1
            
            if Bitscore > 0:
                Score += Bitscore
                detail=(str(i+1)+". Correct Answer : "+str(Bitscore))
                details+=detail
            elif count0 == 4:
                detail=(str(i+1)+". Question Unattempted : "+str(Bitscore) )  
                details+=detail
            elif Bitscore<20 and Bitscore>0:
                detail=(str(i+1)+". Partially Correct : "+str(Bitscore))
                details+=detail
            elif Bitscore==0 and count0<4:
                Bitscore -= 10
                Score += Bitscore
                detail=(str(i+1)+". Wrong Answer : " +str(Bitscore))
                details+=detail
        percentage = (Score / Total) * 100
        return Total, Score, percentage, details

    return calculate_score(student_answers)
